[
  {
    "description": "Creates Neat a grid column of requested size.\n\n",
    "commentRange": {
      "start": 2,
      "end": 23
    },
    "context": {
      "type": "mixin",
      "name": "Grid column",
      "code": "\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: left;\n  margin-left: $_grid-gutter;\n",
      "line": {
        "start": 25,
        "end": 33
      }
    },
    "group": [
      "features"
    ],
    "parameter": [
      {
        "type": "number (unitless)",
        "name": "columns",
        "default": "null"
      },
      {
        "type": "map",
        "name": "grid",
        "default": "$neat-grid",
        "description": "The grid used to generate the column.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include grid-column(3);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  width: calc(25% - 25px);\n  float: left;\n  margin-left: 20px;\n}"
      }
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "_neat-column-default"
      },
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      },
      {
        "type": "function",
        "name": "_neat-column-width"
      }
    ],
    "file": {
      "path": "neat/mixins/_grid-column.scss",
      "name": "_grid-column.scss"
    }
  },
  {
    "description": "Creates a Neat grid container with clearfix.\n\n",
    "commentRange": {
      "start": 2,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "Grid containter",
      "code": "\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n",
      "line": {
        "start": 23,
        "end": 29
      }
    },
    "group": [
      "features"
    ],
    "parameter": [
      {
        "type": "map",
        "name": "grid",
        "default": "$neat-grid",
        "description": "The type of grid for this column.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include grid-container;\n}"
      },
      {
        "type": "css",
        "code": ".element::after {\n  clear: both;\n  content: \"\";\n  display: block;\n}"
      }
    ],
    "access": "public",
    "file": {
      "path": "neat/mixins/_grid-container.scss",
      "name": "_grid-container.scss"
    }
  },
  {
    "description": "Creates a media query in which custom grid properties can be defined.\nAdd the `media` property to your custom grid settings map and add the media\nyou would like to scope to. If  only a number is defined, it is assumed this\nis a `min-with` value. Your custom grid can then be passed to the mixin.\n\n",
    "commentRange": {
      "start": 2,
      "end": 42
    },
    "context": {
      "type": "mixin",
      "name": "Grid media",
      "code": "\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: $grid !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n",
      "line": {
        "start": 44,
        "end": 54
      }
    },
    "group": [
      "features"
    ],
    "parameter": [
      {
        "type": "map",
        "name": "grid",
        "description": "The grid used to generate the column.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$custom-neat-grid: (\n  columns: 12,\n  gutter: 50px,\n  media: 1000px,\n);\n\n.element {\n  @include grid-column(3);\n\n  @include grid-media($custom-neat-grid){\n    @include grid-column(6);\n  }\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  width: calc(25% - 25px);\n  float: left;\n  margin-left: 20px;\n}\n\n@media only screen and (min-width: 1000px) {\n  .element {\n    width: calc(50% - 75px);\n    float: left;\n    margin-left: 50px;\n  }\n}"
      }
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      },
      {
        "type": "function",
        "name": "_neat-parse-media"
      }
    ],
    "file": {
      "path": "neat/mixins/_grid-media.scss",
      "name": "_grid-media.scss"
    }
  },
  {
    "description": "Push or pull a Neat grid column by manipulating its left margin.\n\n",
    "commentRange": {
      "start": 2,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "Grid push",
      "code": "\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $push {\n    $_gutter-affordance: $_grid-gutter * 2;\n    $_margin-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});\n    margin-left: $_margin-value;\n  } @else {\n    $_margin-value: _retrieve-neat-setting($grid, gutter);\n    margin-left: $_margin-value;\n  }\n",
      "line": {
        "start": 24,
        "end": 36
      }
    },
    "group": [
      "features"
    ],
    "parameter": [
      {
        "type": "number (unitless)",
        "name": "push",
        "default": "false"
      },
      {
        "type": "map",
        "name": "grid",
        "default": "$neat-grid",
        "description": "The grid to be used to generate the column.\n  By default, the global `$neat-grid` will be used.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include grid-push(3);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  margin-left: calc(25% - 25px + 40px);\n}"
      }
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      },
      {
        "type": "function",
        "name": "_neat-column-width"
      }
    ],
    "file": {
      "path": "neat/mixins/_grid-push.scss",
      "name": "_grid-push.scss"
    }
  },
  {
    "description": "Shift columns and reorder them within their container using relative\npositioning.\n\n",
    "commentRange": {
      "start": 2,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "Grid push",
      "code": "\n  @if $shift {\n    $_shift-value: calc(#{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting($grid, gutter)});\n    left: $_shift-value;\n  } @else {\n    left: auto;\n  }\n\n  position: relative;\n",
      "line": {
        "start": 26,
        "end": 35
      }
    },
    "group": [
      "features"
    ],
    "parameter": [
      {
        "type": "number (unitless)",
        "name": "shift",
        "default": "false"
      },
      {
        "type": "map",
        "name": "grid",
        "default": "$neat-grid",
        "description": "The grid to be used to generate the column.\n  By default, the global `$neat-grid` will be used.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include grid-shift(3);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  left: calc(25% - 25px + 20px);\n  position: relative;\n}"
      }
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "_neat-column-width"
      },
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      }
    ],
    "file": {
      "path": "neat/mixins/_grid-shift.scss",
      "name": "_grid-shift.scss"
    }
  },
  {
    "description": "Neatâ€™s default grid.\n\n",
    "commentRange": {
      "start": 2,
      "end": 19
    },
    "context": {
      "type": "variable",
      "name": "Default settings",
      "value": "(\n  columns: 12,\n  gutter: 20px,\n  media: null,\n)",
      "scope": "private",
      "line": {
        "start": 21,
        "end": 25
      }
    },
    "group": [
      "settings"
    ],
    "type": "map",
    "property": [
      {
        "type": "number (unitless)",
        "name": "columns",
        "default": "12",
        "description": "Default number of the total grid columns."
      },
      {
        "type": "number (with unit)",
        "name": "gutter",
        "default": "20px",
        "description": "Default grid gutter width between columns."
      },
      {
        "type": "string | number (with unit)",
        "name": "gutter",
        "default": "null",
        "description": "Grid media query."
      }
    ],
    "access": "private",
    "file": {
      "path": "neat/settings/_settings.scss",
      "name": "_settings.scss"
    }
  },
  {
    "description": "This variable is a sass map that overrides Neat's default grid settings.\nUse this to define your project's grid properties incluting gutters and\ntotal column count.\n\n",
    "commentRange": {
      "start": 27,
      "end": 47
    },
    "context": {
      "type": "variable",
      "name": "Neat grid",
      "value": "()",
      "scope": "default",
      "line": {
        "start": 49,
        "end": 49
      }
    },
    "type": "map",
    "group": [
      "settings"
    ],
    "property": [
      {
        "type": "number (unitless)",
        "name": "columns",
        "default": "12",
        "description": "Number of the total grid columns."
      },
      {
        "type": "number (with unit)",
        "name": "gutter",
        "default": "20px",
        "description": "Grid gutter width between columns."
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$neat-grid: (\n  columns: 12,\n  gutter: 20px,\n);"
      }
    ],
    "access": "public",
    "file": {
      "path": "neat/settings/_settings.scss",
      "name": "_settings.scss"
    }
  },
  {
    "description": "If you would like to have multiple grids in a single project, you can do\nthis by defining a new map stored within a variable of your choosing. This\nvariable can then be passed directly in to any of Neat's mixins like\n[`grid-span(12, $my-custom-grid)`](#grid-span).\n\nCustom grids are especially useful with [`grid-media`](#grid-media). By\ndefining a `media` attribute within your custom grid, you are able to easily\ndefine both the attributes of a grid as well as at what breakpoint this grid\nshould activate.\n\n",
    "commentRange": {
      "start": 51,
      "end": 91
    },
    "context": {
      "type": "variable",
      "name": "Custom grids",
      "value": "()",
      "scope": "default",
      "line": {
        "start": 93,
        "end": 93
      }
    },
    "type": "map",
    "group": [
      "settings"
    ],
    "see": [
      {
        "description": "Creates a media query in which custom grid properties can be defined.\nAdd the `media` property to your custom grid settings map and add the media\nyou would like to scope to. If  only a number is defined, it is assumed this\nis a `min-with` value. Your custom grid can then be passed to the mixin.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid media",
          "code": "\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: $grid !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n",
          "line": {
            "start": 44,
            "end": 54
          }
        }
      }
    ],
    "property": [
      {
        "type": "number (unitless)",
        "name": "columns",
        "default": "12",
        "description": "Number of the total grid columns."
      },
      {
        "type": "number (with unit)",
        "name": "gutter",
        "default": "20px",
        "description": "Grid gutter width between columns."
      },
      {
        "type": "number (with unit) | string | null",
        "name": "media",
        "default": "null",
        "description": "The `@media` definition that is used by the [`grid-media`](#grid-media)\n  mixin to detirmine the media properties."
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$my-custom-grid: (\n  columns: 12,\n  gutter: 20px,\n  media: 1200px,\n);\n\n$other-custom-grid-for-print: (\n  columns: 14,\n  gutter: 1.5rem,\n  media: print,\n);"
      }
    ],
    "access": "public",
    "file": {
      "path": "neat/settings/_settings.scss",
      "name": "_settings.scss"
    }
  },
  {
    "description": "Determine if a column count has been given.\nIf no columns have been given return the grid's total column count.\n\n",
    "commentRange": {
      "start": 2,
      "end": 14
    },
    "context": {
      "type": "function",
      "name": "_neat-column-default",
      "code": "\n  @if $columns == null {\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    @return $_grid-columns;\n  } @else {\n    @return $columns;\n  }\n",
      "line": {
        "start": 16,
        "end": 23
      }
    },
    "parameter": [
      {
        "type": "map",
        "name": "grid"
      },
      {
        "type": "number (unitless) | null",
        "name": "columns"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "_neat-column-default($neat-grid, 4)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      }
    ],
    "file": {
      "path": "neat/functions/_neat-column-default.scss",
      "name": "_neat-column-default.scss"
    },
    "usedBy": [
      {
        "description": "Creates Neat a grid column of requested size.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid column",
          "code": "\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: left;\n  margin-left: $_grid-gutter;\n",
          "line": {
            "start": 25,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Determine the ratio of `$columns` to the total column count.\nIf `$columns` is more than one value, they are handed to\n`_neat-parse-columns()` which will detirmine the total columns and use this\nvalue instead of `total-columns`.\n\n",
    "commentRange": {
      "start": 2,
      "end": 16
    },
    "context": {
      "type": "function",
      "name": "_neat-column-ratio",
      "code": "\n  @if length($columns) > 1 {\n    @return nth($columns, 1) / _neat-parse-columns($columns);\n  } @else if $columns {\n    @return $columns / _retrieve-neat-setting($grid, columns);\n  }\n",
      "line": {
        "start": 18,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "map",
        "name": "grid"
      },
      {
        "type": "number | list",
        "name": "columns"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "_neat-column-ratio($grid, 3)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_neat-parse-columns"
      },
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      }
    ],
    "file": {
      "path": "neat/functions/_neat-column-ratio.scss",
      "name": "_neat-column-ratio.scss"
    },
    "usedBy": [
      {
        "description": "Return a calulated column width that can then be passed in to a `calc()`.\n\n",
        "context": {
          "type": "function",
          "name": "_neat-column-width",
          "code": "\n  $_column-ratio: _neat-column-ratio($grid, $columns);\n  $_gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $_gutter == 0 {\n    @return unquote(\"#{percentage($_column-ratio)}\");\n  } @else {\n    $_gutter-affordance: $_gutter + ($_gutter * $_column-ratio);\n    @return unquote(\"#{percentage($_column-ratio)} - #{$_gutter-affordance}\");\n  }\n",
          "line": {
            "start": 15,
            "end": 25
          }
        }
      }
    ]
  },
  {
    "description": "Return a calulated column width that can then be passed in to a `calc()`.\n\n",
    "commentRange": {
      "start": 2,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_neat-column-width",
      "code": "\n  $_column-ratio: _neat-column-ratio($grid, $columns);\n  $_gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $_gutter == 0 {\n    @return unquote(\"#{percentage($_column-ratio)}\");\n  } @else {\n    $_gutter-affordance: $_gutter + ($_gutter * $_column-ratio);\n    @return unquote(\"#{percentage($_column-ratio)} - #{$_gutter-affordance}\");\n  }\n",
      "line": {
        "start": 15,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "map",
        "name": "grid"
      },
      {
        "type": "number",
        "name": "columns"
      }
    ],
    "return": {
      "type": "string"
    },
    "example": [
      {
        "type": "scss",
        "code": "_neat-column-width($neat-grid, 4)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_neat-column-ratio"
      },
      {
        "type": "function",
        "name": "_retrieve-neat-setting"
      }
    ],
    "file": {
      "path": "neat/functions/_neat-column-width.scss",
      "name": "_neat-column-width.scss"
    },
    "usedBy": [
      {
        "description": "Creates Neat a grid column of requested size.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid column",
          "code": "\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: left;\n  margin-left: $_grid-gutter;\n",
          "line": {
            "start": 25,
            "end": 33
          }
        }
      },
      {
        "description": "Push or pull a Neat grid column by manipulating its left margin.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid push",
          "code": "\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $push {\n    $_gutter-affordance: $_grid-gutter * 2;\n    $_margin-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});\n    margin-left: $_margin-value;\n  } @else {\n    $_margin-value: _retrieve-neat-setting($grid, gutter);\n    margin-left: $_margin-value;\n  }\n",
          "line": {
            "start": 24,
            "end": 36
          }
        }
      },
      {
        "description": "Shift columns and reorder them within their container using relative\npositioning.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid push",
          "code": "\n  @if $shift {\n    $_shift-value: calc(#{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting($grid, gutter)});\n    left: $_shift-value;\n  } @else {\n    left: auto;\n  }\n\n  position: relative;\n",
          "line": {
            "start": 26,
            "end": 35
          }
        }
      }
    ]
  },
  {
    "description": "Parse a column count like `3 of 5` and retur the total coloumn count.\nThis is to allow a shorthand for custom grids without using a settings map.\n\n\n",
    "commentRange": {
      "start": 2,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_neat-parse-columns",
      "code": "\n  @if length($span) == 3 {\n    $_total-columns: nth($span, 3);\n    @return $_total-columns;\n  } @else if length($span) == 2 or if length($span) >= 3 {\n    @error \"`$column` should contain 2 values, seperated by an `of`\";\n  }\n",
      "line": {
        "start": 15,
        "end": 22
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "span"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "_neat-parse-columns(3 of 5)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "throw": [
      "`$column` should contain 2 values, seperated by an `of`"
    ],
    "file": {
      "path": "neat/functions/_neat-parse-columns.scss",
      "name": "_neat-parse-columns.scss"
    },
    "usedBy": [
      {
        "description": "Determine the ratio of `$columns` to the total column count.\nIf `$columns` is more than one value, they are handed to\n`_neat-parse-columns()` which will detirmine the total columns and use this\nvalue instead of `total-columns`.\n\n",
        "context": {
          "type": "function",
          "name": "_neat-column-ratio",
          "code": "\n  @if length($columns) > 1 {\n    @return nth($columns, 1) / _neat-parse-columns($columns);\n  } @else if $columns {\n    @return $columns / _retrieve-neat-setting($grid, columns);\n  }\n",
          "line": {
            "start": 18,
            "end": 24
          }
        }
      }
    ]
  },
  {
    "description": "Parse media types. If the property is a string then return it, otherwise\nassume screen and min-width.\n\n",
    "commentRange": {
      "start": 2,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "_neat-parse-media",
      "code": "\n  @if type-of($media) == number {\n    @return \"only screen and (min-width: #{$media})\";\n  } @else if type-of($media) == string {\n    @return \"#{$media}\";\n  }\n",
      "line": {
        "start": 14,
        "end": 20
      }
    },
    "parameter": [
      {
        "type": "string | number (with unit)",
        "name": "media"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "_neat-parse-media($grid, 1000px)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "neat/functions/_neat-parse-media.scss",
      "name": "_neat-parse-media.scss"
    },
    "usedBy": [
      {
        "description": "Creates a media query in which custom grid properties can be defined.\nAdd the `media` property to your custom grid settings map and add the media\nyou would like to scope to. If  only a number is defined, it is assumed this\nis a `min-with` value. Your custom grid can then be passed to the mixin.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid media",
          "code": "\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: $grid !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n",
          "line": {
            "start": 44,
            "end": 54
          }
        }
      }
    ]
  },
  {
    "description": "Return a Neat setting.\n\n",
    "commentRange": {
      "start": 2,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_retrieve-neat-setting",
      "code": "\n  $_grid-settings: map-merge($_neat-grid-defaults, $grid);\n  @return map-get($_grid-settings, $setting);\n",
      "line": {
        "start": 15,
        "end": 18
      }
    },
    "parameter": [
      {
        "type": "map",
        "name": "grid"
      },
      {
        "type": "string",
        "name": "setting"
      }
    ],
    "return": {
      "type": "boolean | color | list | number | string"
    },
    "example": [
      {
        "type": "scss",
        "code": "_retrieve-neat-setting($neat-grid, columns)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "neat/functions/_retrieve-neat-settings.scss",
      "name": "_retrieve-neat-settings.scss"
    },
    "usedBy": [
      {
        "description": "Creates Neat a grid column of requested size.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid column",
          "code": "\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: left;\n  margin-left: $_grid-gutter;\n",
          "line": {
            "start": 25,
            "end": 33
          }
        }
      },
      {
        "description": "Creates a media query in which custom grid properties can be defined.\nAdd the `media` property to your custom grid settings map and add the media\nyou would like to scope to. If  only a number is defined, it is assumed this\nis a `min-with` value. Your custom grid can then be passed to the mixin.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid media",
          "code": "\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: $grid !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n",
          "line": {
            "start": 44,
            "end": 54
          }
        }
      },
      {
        "description": "Push or pull a Neat grid column by manipulating its left margin.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid push",
          "code": "\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $push {\n    $_gutter-affordance: $_grid-gutter * 2;\n    $_margin-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});\n    margin-left: $_margin-value;\n  } @else {\n    $_margin-value: _retrieve-neat-setting($grid, gutter);\n    margin-left: $_margin-value;\n  }\n",
          "line": {
            "start": 24,
            "end": 36
          }
        }
      },
      {
        "description": "Shift columns and reorder them within their container using relative\npositioning.\n\n",
        "context": {
          "type": "mixin",
          "name": "Grid push",
          "code": "\n  @if $shift {\n    $_shift-value: calc(#{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting($grid, gutter)});\n    left: $_shift-value;\n  } @else {\n    left: auto;\n  }\n\n  position: relative;\n",
          "line": {
            "start": 26,
            "end": 35
          }
        }
      },
      {
        "description": "Determine if a column count has been given.\nIf no columns have been given return the grid's total column count.\n\n",
        "context": {
          "type": "function",
          "name": "_neat-column-default",
          "code": "\n  @if $columns == null {\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    @return $_grid-columns;\n  } @else {\n    @return $columns;\n  }\n",
          "line": {
            "start": 16,
            "end": 23
          }
        }
      },
      {
        "description": "Determine the ratio of `$columns` to the total column count.\nIf `$columns` is more than one value, they are handed to\n`_neat-parse-columns()` which will detirmine the total columns and use this\nvalue instead of `total-columns`.\n\n",
        "context": {
          "type": "function",
          "name": "_neat-column-ratio",
          "code": "\n  @if length($columns) > 1 {\n    @return nth($columns, 1) / _neat-parse-columns($columns);\n  } @else if $columns {\n    @return $columns / _retrieve-neat-setting($grid, columns);\n  }\n",
          "line": {
            "start": 18,
            "end": 24
          }
        }
      },
      {
        "description": "Return a calulated column width that can then be passed in to a `calc()`.\n\n",
        "context": {
          "type": "function",
          "name": "_neat-column-width",
          "code": "\n  $_column-ratio: _neat-column-ratio($grid, $columns);\n  $_gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $_gutter == 0 {\n    @return unquote(\"#{percentage($_column-ratio)}\");\n  } @else {\n    $_gutter-affordance: $_gutter + ($_gutter * $_column-ratio);\n    @return unquote(\"#{percentage($_column-ratio)} - #{$_gutter-affordance}\");\n  }\n",
          "line": {
            "start": 15,
            "end": 25
          }
        }
      }
    ]
  }
]
